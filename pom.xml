<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.noesisinformatica</groupId>
    <artifactId>noesisinformatica</artifactId>
    <version>1.8.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>Noesis Informatica Parent</name>
    <description>The Organisation POM for all Noesis Informatica projects</description>
    <url>http://noesisinformatica.com</url>
    <ciManagement>
        <url>https://noesisinformatica.ci.cloudbees.com/job/Noesis-Org/</url>
    </ciManagement>

    <!-- Organisation Information -->
    <organization>
        <name>Noesis Informatica</name>
        <url>http://www.noesisinformatica.com</url>
    </organization>

    <developers>
        <developer>
            <id>jaykola</id>
            <name>Jay Kola</name>
            <email>jay@noesisinformatica.com</email>
            <organization>${project.organization.name}</organization>
            <organizationUrl>${project.organization.url}</organizationUrl>
            <roles>
                <role>Lead Architect</role>
                <role>Developer</role>
            </roles>
            <timezone>+0</timezone>
            <properties />
        </developer>
    </developers>
    <inceptionYear>2012</inceptionYear>

    <scm>
        <connection>scm:hg:file://${basedir}</connection>
        <developerConnection>scm:hg:https://noesisinformatica.kilnhg.com/Code/Repositories/Products/Noesis-Org</developerConnection>
        <url>scm:hg:file://${basedir}</url>
        <tag>HEAD</tag>
    </scm>

    <licenses>
        <license>
            <name>Noesis Informatica License</name>
            <url>http://noesisinformatica.com/licenses/LICENSE-1.0.txt</url>
        </license>
    </licenses>

    <properties>
        <author.name>Jay Kola</author.name>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <buildnumber.plugin.phase>validate</buildnumber.plugin.phase>
        <application.name>${project.groupId}:${project.artifactId}</application.name>
        <resources.plugin.version>2.6</resources.plugin.version>
        <assembly.plugin.version>2.4</assembly.plugin.version>
        <clean.plugin.version>2.5</clean.plugin.version>
        <jar.plugin.version>2.4</jar.plugin.version>
        <deploy.plugin.version>2.8.1</deploy.plugin.version>
        <javadoc.plugin.version>2.9.1</javadoc.plugin.version>
        <surefire.plugin.version>2.17</surefire.plugin.version>
        <release.plugin.version>2.5</release.plugin.version>
        <compiler.plugin.version>3.1</compiler.plugin.version>
        <build.helper.plugin.version>1.8</build.helper.plugin.version>
        <build.number.plugin.version>1.2</build.number.plugin.version>
        <info.reports.plugin.version>2.7</info.reports.plugin.version>
    </properties>

    <repositories>
        <repository>
            <id>Sonatype snapshots repository</id>
            <name>Sonatype's Maven snapshots repository</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
        </repository>
        <repository>
            <id>com.springsource.repository.bundles.release</id>
            <name>SpringSource Enterprise Bundle Repository - SpringSource Bundle Releases</name>
            <url>http://repository.springsource.com/maven/bundles/release</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>com.springsource.repository.bundles.external</id>
            <name>SpringSource Enterprise Bundle Repository - External Bundle Releases</name>
            <url>http://repository.springsource.com/maven/bundles/external</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>com.springsource.repository.libraries.release</id>
            <name>SpringSource Enterprise Bundle Repository - SpringSource Library Releases</name>
            <url>http://repository.springsource.com/maven/libraries/release</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>com.springsource.repository.libraries.external</id>
            <name>SpringSource Enterprise Bundle Repository - External Library Releases</name>
            <url>http://repository.springsource.com/maven/libraries/external</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>

        <repository>
            <id>spring-maven-release</id>
            <name>Spring Maven Release Repository</name>
            <url>http://maven.springframework.org/release</url>
        </repository>
        <repository>
            <id>maven2-repository.dev.java.net</id>
            <name>Java.net Repository for Maven</name>
            <url>http://download.java.net/maven/2/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <!-- Add Noesis repos, since we need 'license' artefact -->
        <repository>
            <id>noesisinformatica.releases</id>
            <url>https://repository-noesisinformatica.forge.cloudbees.com/release/</url>
            <releases><enabled>true</enabled></releases>
            <snapshots><enabled>false</enabled></snapshots>
        </repository>
        <repository>
            <id>noesisinformatica.snapshots</id>
            <url>https://repository-noesisinformatica.forge.cloudbees.com/snapshot</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>noesisinformatica.releases</id>
            <url>https://repository-noesisinformatica.forge.cloudbees.com/release/</url>
            <releases><enabled>true</enabled></releases>
            <snapshots><enabled>false</enabled></snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>noesisinformatica.snapshots</id>
            <url>https://repository-noesisinformatica.forge.cloudbees.com/snapshot</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>eclipse.virgo.build.bundles.release</id>
            <name>Eclipse Virgo Build</name>
            <url>http://build.eclipse.org/rt/virgo/maven/bundles/release</url>
        </pluginRepository>
        <pluginRepository>
            <id>com.springsource.repository.bundles.external</id>
            <name>SpringSource Enterprise Bundle Repository - External Bundle Releases</name>
            <url>http://repository.springsource.com/maven/bundles/external</url>
        </pluginRepository>
    </pluginRepositories>

    <distributionManagement>
        <repository>
            <id>noesisinformatica.releases</id>
            <url>dav:https://repository-noesisinformatica.forge.cloudbees.com/release/</url>
        </repository>
        <snapshotRepository>
            <id>noesisinformatica.snapshots</id>
            <url>dav:https://repository-noesisinformatica.forge.cloudbees.com/snapshot</url>
            <uniqueVersion>false</uniqueVersion>
        </snapshotRepository>
    </distributionManagement>

    <build>
        <!-- Extension to add wagon-webdav plugin -->
        <extensions>
            <extension>
            	<groupId>org.apache.maven.wagon</groupId>
            	<artifactId>wagon-webdav-jackrabbit</artifactId>
            	<version>2.3</version>
            </extension>
        </extensions>
        <pluginManagement>
            <plugins>
                <!-- Maven Sure fire plugin does not play well with assertions enabled using
               annotations.. Unfortunately, we use this in Spring + Hibernate.. so we explicity disable this feature
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${surefire.plugin.version}</version>
                    <configuration>
                        <enableAssertions>false</enableAssertions>
                        <!-- increase memory allocation for surefire plugins because JUnits test do not respect
                           MAVEN_OPTS setting
                         -->
                        <forkMode>pertest</forkMode>
                        <argLine>-Xms128m -Xmx2000m</argLine>
                        <testFailureIgnore>false</testFailureIgnore>
                        <skip>false</skip>

                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${compiler.plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <encoding>utf-8</encoding>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>${release.plugin.version}</version>
                    <configuration>
                        <tagNameFormat>@{project.version}</tagNameFormat>
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <checkModificationExcludes>
                            <exclude>target/**</exclude>
                            <exclude>.idea/**</exclude>
                            <exclude>**/*.iml</exclude>
                            <exclude>**/*.log</exclude>
                            <exclude>**/*.xml</exclude>
                            <exclude>${project.build.directory}/**/*.*</exclude>
                        </checkModificationExcludes>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.scm</groupId>
                            <artifactId>maven-scm-provider-hg</artifactId>
                            <version>1.9</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${deploy.plugin.version}</version>
    			</plugin>
                <plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${assembly.plugin.version}</version>
    			</plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-scm-plugin</artifactId>
                    <version>1.9</version>
                    <configuration>
                        <connectionType>developerConnection</connectionType>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${jar.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>2.8</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-changes-plugin</artifactId>
                    <version>2.9</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${resources.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.3</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.wagon</groupId>
                            <artifactId>wagon-ssh</artifactId>
                            <version>2.2</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>1.5</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>${build.number.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>${buildnumber.plugin.phase}</phase>
                        <goals>
                            <goal>hgchangeset</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <doCheck>false</doCheck>
                    <doUpdate>false</doUpdate>
                    <revisionOnScmFailure>0</revisionOnScmFailure>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${jar.plugin.version}</version>
                <configuration>
                    <archive>
                        <manifestEntries>
                            <Build-Version>${project.version}</Build-Version>
                            <Build-Number>${changeSet}</Build-Number>
                            <Build-Time>${changeSetDate}</Build-Time>
                            <url>${project.url}</url>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${deploy.plugin.version}</version>
            </plugin>
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.3.1</version>
                <dependencies>
                    <dependency>
                        <groupId>org.semver</groupId>
                        <artifactId>enforcer-rule</artifactId>
                        <version>0.9.17</version>
                    </dependency>
                    <dependency>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>extra-enforcer-rules</artifactId>
                        <version>1.0-alpha-5</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>check</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireBackwardCompatibility implementation="org.semver.enforcer.RequireBackwardCompatibility">
                                    <compatibilityType>${compatibility.level}</compatibilityType>
                                </requireBackwardCompatibility>
                                <requireSemanticVersioningConformance implementation="org.semver.enforcer.RequireSemanticVersioningConformance" />
                            </rules>
                            <fail>${strict.semver.conformance}</fail>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enforce-ban-circular-dependencies</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <banCircularDependencies />
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.0,)</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enforce-no-snapshots</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireReleaseDeps>
                                    <message>WARNING...You are deploying an artefact that has Snapshot dependencies!</message>
                                </requireReleaseDeps>
                            </rules>
                            <fail>false</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
                Use clean plugin to delete LICENSE.txt file in src folder if it exists.
                This file is recreated by the license plugin below. This ensures we always
                have the correct version number for the artefact - since the replacer
                plugin adds this information.
            -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${clean.plugin.version}</version>
                <executions>
                    <execution>
                        <id>delete-existing-license-file</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <configuration>
                            <failOnError>false</failOnError>
                            <filesets>
                                <fileset>
                                    <directory>${project.basedir}</directory>
                                    <includes>
                                        <include>LICENSE.txt</include>
                                    </includes>
                                    <followSymlinks>false</followSymlinks>
                                </fileset>
                            </filesets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>1.6</version>
                <configuration>
                    <licenseName>noesis_license</licenseName>
                    <licenseResolver>classpath://com/noesisinformatica/license</licenseResolver>
                </configuration>
                <executions>
                    <execution>
                        <id>update-file-header</id>
                        <goals>
                            <goal>update-project-license</goal>
                            <goal>update-file-header</goal>
                        </goals>
                        <phase>process-sources</phase>
                        <configuration>
                            <licenseName>noesis_license</licenseName>
                            <roots>
                                <root>${project.basedir}/src</root>
                                <root>${project.basedir}/test</root>
                                <root>${project.basedir}/grails-app</root>
                            </roots>
                            <extraExtensions>
                                <gsp>xml</gsp>
                            </extraExtensions>
                            <excludes>
                                <exclude>**/_*Template.gsp</exclude>
                            </excludes>
                            <!-- Disable add after package, since it makes license appear in middle of groovy classes -->
                            <addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
                        </configuration>
                    </execution>
                    <execution>
                        <id>download-licenses</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>download-licenses</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>add-third-party</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>aggregate-add-third-party</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.noesisinformatica</groupId>
                        <artifactId>license</artifactId>
                        <version>1.2.0</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>
                <version>1.5.2</version>
                <executions>
                    <execution>
                        <id>update-license-in-base-dir</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <ignoreMissingFile>true</ignoreMissingFile>
                            <file>${project.basedir}/LICENSE.txt</file>
                            <replacements>
                                <replacement>
                                    <token>$PROJECT_NAME$</token>
                                    <value>${project.name}</value>
                                </replacement>
                                <replacement>
                                    <token>$PROJECT_VERSION$</token>
                                    <value>${project.version}</value>
                                </replacement>
                            </replacements>
                            <regex>false</regex>
                        </configuration>
                    </execution>
                    <execution>
                        <id>update-license-in-generated-sources</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                        <configuration>
                            <ignoreMissingFile>true</ignoreMissingFile>
                            <file>${project.build.directory}/generated-sources/license/LICENSE.txt</file>
                            <replacements>
                                <replacement>
                                    <token>$PROJECT_NAME$</token>
                                    <value>${project.name}</value>
                                </replacement>
                                <replacement>
                                    <token>$PROJECT_VERSION$</token>
                                    <value>${project.version}</value>
                                </replacement>
                            </replacements>
                            <regex>false</regex>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${resources.plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-license-files</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <encoding>utf-8</encoding>
                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/generated-sources/license</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--<plugin>-->
                <!--<groupId>org.codehaus.mojo</groupId>-->
                <!--<artifactId>build-helper-maven-plugin</artifactId>-->
                <!--<version>${build.helper.plugin.version}</version>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>remove-old-artifacts</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>remove-project-artifact</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--&lt;!&ndash; When true, remove all built artifacts including all versions.-->
                                 <!--When false, remove all built artifacts of this project version &ndash;&gt;-->
                            <!--<removeAll>false</removeAll>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
        </plugins>
    </build>

    <reporting>
        <plugins>
            <!-- Use mvn javadoc:aggregate to generate javadoc for entire project -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${javadoc.plugin.version}</version>
                <configuration>
                    <encoding>utf-8</encoding>
                    <detectLinks>true</detectLinks>
                    <failOnError>false</failOnError>
                    <detectJavaApiLink>true</detectJavaApiLink>
                    <doclet>org.umlgraph.doclet.UmlGraphDoc</doclet>
                    <docletArtifact>
                        <groupId>org.umlgraph</groupId>
                        <artifactId>doclet</artifactId>
                        <version>5.6.6</version>
                    </docletArtifact>
                    <additionalparam>-views</additionalparam>
                    <useStandardDocletOptions>true</useStandardDocletOptions>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${info.reports.plugin.version}</version>
                <configuration>
                    <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <profile>
            <id>noesis-dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <compatibility.level>BACKWARD_COMPATIBLE_USER</compatibility.level>
                <strict.semver.conformance>false</strict.semver.conformance>
            </properties>
        </profile>
        <profile>
            <id>noesis-prod</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <compatibility.level>BACKWARD_COMPATIBLE_IMPLEMENTER</compatibility.level>
                <strict.semver.conformance>true</strict.semver.conformance>
            </properties>
        </profile>
        <profile>
            <!-- Use mvn clean install -P osgi to generate OSGI bundles -->
            <!-- Not specifying a profile on commandline makes Maven ignore all other profiles-->
            <id>osgi</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                        <version>${jar.plugin.version}</version>
                        <configuration>
                            <archive>
                                <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
                            </archive>
                        </configuration>
                    </plugin>
                    <plugin>
                        <!--
                         | the following instructions build a simple set of public/private classes into an OSGi bundle
                        -->
                        <groupId>org.apache.felix</groupId>
                        <artifactId>maven-bundle-plugin</artifactId>
                        <version>2.3.7</version>
                        <extensions>true</extensions>
                        <configuration>
                            <instructions>
                                <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
                                <!--<Bundle-Version>${project.version}</Bundle-Version>-->
                                <!-- replace snapshot with timestamp because osgi can not handle snapshots -->
                                <Bundle-Version>$(replace;${project.version};-SNAPSHOT;.$(tstamp))</Bundle-Version>
                                <_snapshot>${maven.build.timestamp}</_snapshot>
                                <!--
                                 | assume public classes are in the top package, and private classes are under ".internal"
                                -->
                                <Export-Package>!${project.groupId}.${project.artifactId}.internal.*, ${project.groupId}.${project.artifactId}.*"</Export-Package>
                                <!--<Export-Package>!${project.groupId}.${project.artifactId}.internal.*,${project.groupId}.${project.artifactId}.*;version="${project.version}"</Export-Package>-->
                                <!--<Export-Package>!${bundle.namespace}.internal.*,${bundle.namespace}.*;version="${project.version}"</Export-Package>-->
                                <!--<Private-Package>${bundle.namespace}.internal.*</Private-Package>-->
                                <!--
                                  embed compile/runtime dependencies using path that matches the copied dependency folder
                                -->
                                <!--<Embed-Dependency>*;scope=compile|runtime;inline=false</Embed-Dependency>-->
                                <!--<Embed-Directory>target/dependency</Embed-Directory>-->
                                <!--<Embed-StripGroup>true</Embed-StripGroup>-->
                                <Spring-Context>META-INF/spring/bundle-context.xml</Spring-Context>
                                <!--<Bundle-Blueprint>OSGI-INF/blueprint/blueprint.xml</Bundle-Blueprint>-->
                                <!--
                                 | each module can override these defaults in their osgi.bnd file
                                -->
                                <_include>-osgi.bnd</_include>
                            </instructions>
                            <!--Tell plugin not to include Maven information in Jar file-->
                            <archive>
                                <!--<addMavenDescriptor>false</addMavenDescriptor>-->
                                <manifestEntries>
                                    <!--Add custom meta information to bundle-->
                                    <Bundle-Author>${author.name}</Bundle-Author>
                                    <Bundle-Build-Number>${changeSet}</Bundle-Build-Number>
                                    <Bundle-Build-Time>${maven.build.timestamp}</Bundle-Build-Time>
                                </manifestEntries>
                            </archive>
                        </configuration>
                        <executions>
                            <execution>
                                <id>generate-bundle-manifest</id>
                                <phase>process-classes</phase>
                                <goals>
                                    <goal>manifest</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>jar</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.virgo.bundlor</groupId>
                        <artifactId>org.eclipse.virgo.bundlor.maven</artifactId>
                        <version>1.1.2.RELEASE</version>
                        <configuration>
                            <manifestTemplate>
                                Bundle-ManifestVersion: 2
                                Bundle-Name: ${project.name}
                                Bundle-SymbolicName: ${project.artifactId}
                                Bundle-Version: ${project.version}
                            </manifestTemplate>
                        </configuration>
                        <executions>
                            <execution>
                                <id>bundlor</id>
                                <goals>
                                    <goal>bundlor</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>